<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>script | Carlos Biagi Jr</title>
    <link>https://cbiagii.github.io/tag/script/</link>
      <atom:link href="https://cbiagii.github.io/tag/script/index.xml" rel="self" type="application/rss+xml" />
    <description>script</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 29 Jun 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://cbiagii.github.io/images/icon_huce239040eb2a10cf8e49f362a5f47bf9_18820_512x512_fill_lanczos_center_2.png</url>
      <title>script</title>
      <link>https://cbiagii.github.io/tag/script/</link>
    </image>
    
    <item>
      <title>Integrating R with SLURM job submission</title>
      <link>https://cbiagii.github.io/post/post_03/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://cbiagii.github.io/post/post_03/</guid>
      <description>&lt;p&gt;Sometimes working with R within an High-Performance Computing (HPC) environment is difficult. If you use an HPC or server that uses the Slurm Workload Manager (SLURM) system for job submission, I will present an alternative that helps me a lot when I need to submit some analysis to the job queue. Let&amp;rsquo;s create a situation here: imagine that you have 5 different single-cell data or 5 samples from different patients, and, starting from the raw count file or the files provided by 10X genomics, you want to pre-process the data using the 
&lt;a href=&#34;https://satijalab.org/seurat/v3.2/pbmc3k_tutorial.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Seurat standard pipeline&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, we will have to create a file that here we will call &lt;strong&gt;sampleName.txt&lt;/strong&gt;, which contains the names of the samples. Below is an example of this very simple file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;sample_01
sample_02
sample_03
sample_04
sample_05
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then a file called &lt;strong&gt;SeuratPreProcess.R&lt;/strong&gt; should be created, which will contain the script with the standard Seurat commands. An example of the script is below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;#!/usr/bin/env Rscript
arguments = commandArgs(trailingOnly=TRUE)

options(future.globals.maxSize = 20 * 1024 ^ 3)
plan(&amp;quot;multiprocess&amp;quot;, workers = 6)

sample &amp;lt;- as.character(arguments)

# Loading packages
library(Seurat)
library(future)

# Check if the input is a csv file or a 10x directory
test &amp;lt;- dir.exists(file.path(&amp;quot;/path/to/datasets&amp;quot;, sample))
if (test) {
  data &amp;lt;- CreateSeuratObject(counts = Read10X(data.dir = file.path(&amp;quot;/path/to/datasets&amp;quot;, sample)),
                             project = sample,
                             min.cells = 3,
                             min.features = 200)
} else {
  tmp &amp;lt;- list.files(&amp;quot;/path/to/datasets&amp;quot;, full.names = T)
  data &amp;lt;- CreateSeuratObject(counts = read.table(grep(sample, tmp, value = T), header = T, row.names = 1),
                             project = sample,
                             min.cells = 3,
                             min.features = 200)
}

s.genes &amp;lt;- cc.genes$s.genes
g2m.genes &amp;lt;- cc.genes$g2m.genes

dir.create(file.path(&amp;quot;/path/to/output&amp;quot;, sample))

data[[&amp;quot;percent.mt&amp;quot;]] &amp;lt;- PercentageFeatureSet(data, pattern = &amp;quot;^MT-&amp;quot;)
data &amp;lt;- subset(data, subset = nFeature_RNA &amp;lt; 3000 &amp;amp; percent.mt &amp;lt; 10)

data &amp;lt;- NormalizeData(data, verbose = F)

data &amp;lt;- FindVariableFeatures(data, verbose = F)

data &amp;lt;- CellCycleScoring(data, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)

data &amp;lt;- ScaleData(data, vars.to.regress = c(&amp;quot;nCount_RNA&amp;quot;, &amp;quot;percent.mt&amp;quot;, &amp;quot;S.Score&amp;quot;, &amp;quot;G2M.Score&amp;quot;))

data &amp;lt;- RunPCA(data, verbose = F)

data &amp;lt;- FindNeighbors(data)
data &amp;lt;- FindClusters(data)

data &amp;lt;- RunTSNE(data, perplexity = 30, dims = 1:30)
data &amp;lt;- RunUMAP(data, dims = 1:30)

# Save seurat object
saveRDS(data, file = file.path(&amp;quot;/path/to/output&amp;quot;, sample, paste0(sample, &amp;quot;.rds&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I draw your attention to some details of the script:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first line is the 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Shebang_%28Unix%29.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shebang line&lt;/a&gt;, and the second one indicates that the script will receive the sample name as arguments as input.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;#!/usr/bin/env Rscript
arguments = commandArgs(trailingOnly=TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Changes the &lt;em&gt;/path/to/output&lt;/em&gt; variable pointing to the directory that contains the sample folders.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The next step is to create a script named &lt;strong&gt;submitJob_SeuratPreProcess.R&lt;/strong&gt;. This script has the function of creating the &lt;em&gt;btc&lt;/em&gt; file for the job submission.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(optparse)
library(digest)

option_list = list(
  make_option(c(&amp;quot;-f&amp;quot;, &amp;quot;--file&amp;quot;), type=&amp;quot;character&amp;quot;, default=NULL, 
              help=&amp;quot;sample names file [default= %default]&amp;quot;, metavar=&amp;quot;character&amp;quot;),
  make_option(c(&amp;quot;-p&amp;quot;, &amp;quot;--script&amp;quot;), type=&amp;quot;character&amp;quot;, default=NULL, 
              help=&amp;quot;path to script file [default= %default]&amp;quot;, metavar=&amp;quot;character&amp;quot;),
  make_option(c(&amp;quot;-c&amp;quot;, &amp;quot;--cpu&amp;quot;), type=&amp;quot;numeric&amp;quot;, default=NULL, 
              help=&amp;quot;number of cpus per task [default= %default]&amp;quot;, metavar=&amp;quot;numeric&amp;quot;), 
  make_option(c(&amp;quot;-m&amp;quot;, &amp;quot;--mem&amp;quot;), type=&amp;quot;character&amp;quot;, default=NULL, 
              help=&amp;quot;number of minimum amount of real memory [default= %default]&amp;quot;, metavar=&amp;quot;character&amp;quot;), 
  make_option(c(&amp;quot;-t&amp;quot;, &amp;quot;--time&amp;quot;), type=&amp;quot;numeric&amp;quot;, default=NULL, 
              help=&amp;quot;time limit in minutes [default= %default]&amp;quot;, metavar=&amp;quot;numeric&amp;quot;)
); 

opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);

if (is.null(opt$file)){
  print_help(opt_parser)
  stop(&amp;quot;Input a sample names file.&amp;quot;, call.=FALSE)
} else if (is.null(opt$script)){
  print_help(opt_parser)
  stop(&amp;quot;Input a path to a script file.&amp;quot;, call.=FALSE)
} else if (is.null(opt$cpu)) {
  print_help(opt_parser)
  stop(&amp;quot;Input the number of cpus per task.&amp;quot;, call.=FALSE)
} else if (is.null(opt$mem)) {
  print_help(opt_parser)
  stop(&amp;quot;Input the number of minimum amount of real memory.&amp;quot;, call.=FALSE)
} else if (is.null(opt$time)) {
  print_help(opt_parser)
  stop(&amp;quot;time limit in minutes.&amp;quot;, call.=FALSE)
}

df &amp;lt;- readLines(opt$file)
jobname &amp;lt;- paste0(&amp;quot;tmp_&amp;quot;, digest(Sys.time(), algo = &amp;quot;xxhash32&amp;quot;))

for (i in seq_along(df)) {
    sink(paste0(&amp;quot;/scratch/biagi/&amp;quot;, jobname, &amp;quot;_&amp;quot;, i, &amp;quot;.btc&amp;quot;))
    
    cat(&amp;quot;#! /bin/bash -l&amp;quot;, &amp;quot;\n&amp;quot;)
    cat(paste0(&amp;quot;#SBATCH --job-name &amp;quot;, paste0(jobname, &amp;quot;_&amp;quot;, i)), &amp;quot;\n&amp;quot;)
    cat(paste0(&amp;quot;#SBATCH --error &amp;quot;, paste0(&amp;quot;/scratch/biagi/&amp;quot;, jobname, &amp;quot;_&amp;quot;, i, &amp;quot;.err&amp;quot;)), &amp;quot;\n&amp;quot;)
    cat(paste0(&amp;quot;#SBATCH --output &amp;quot;, paste0(&amp;quot;/scratch/biagi/&amp;quot;, jobname, &amp;quot;_&amp;quot;, i, &amp;quot;.out&amp;quot;), &amp;quot;\n&amp;quot;))
    cat(paste0(&amp;quot;#SBATCH --cpus-per-task=&amp;quot;, opt$cpu), &amp;quot;\n&amp;quot;)
    cat(paste0(&amp;quot;#SBATCH --mem=&amp;quot;, opt$mem), &amp;quot;\n&amp;quot;)
    cat(paste0(&amp;quot;#SBATCH --time=&amp;quot;, opt$time), &amp;quot;\n&amp;quot;)
    cat(&amp;quot;\n&amp;quot;)
    cat(paste0(&amp;quot;R --vanilla -f &amp;quot;, opt$script, &amp;quot; --args &amp;quot;, df[i]), &amp;quot;\n&amp;quot;)
    cat(&amp;quot;\n&amp;quot;)
    cat(&amp;quot;echo [$(date)] Starting execution of sample&amp;quot;, &amp;quot;\n&amp;quot;)
    
    sink()
    
    system(paste0(&amp;quot;sbatch /scratch/biagi/&amp;quot;, jobname, &amp;quot;_&amp;quot;, i, &amp;quot;.btc&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above script has the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-f&lt;/strong&gt; or &lt;strong&gt;&amp;ndash;file&lt;/strong&gt;: sample name file (for example the previously created file named &lt;em&gt;sampleName.txt&lt;/em&gt;);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-p&lt;/strong&gt; or &lt;strong&gt;&amp;ndash;script&lt;/strong&gt;: path to script file (for example the previously created file named &lt;em&gt;SeuratPreProcess.R&lt;/em&gt;);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-c&lt;/strong&gt; or &lt;strong&gt;&amp;ndash;cpu&lt;/strong&gt;: number of cpus per task to be used in HPC/server;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-m&lt;/strong&gt; or &lt;strong&gt;&amp;ndash;mem&lt;/strong&gt;: number of minimum amount of real memory to be used in HPC/server;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-t&lt;/strong&gt; ot &lt;strong&gt;&amp;ndash;time&lt;/strong&gt;: time limit in minutes to run the script in HPC/server.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The script will create an random btc and logs files name (&lt;em&gt;xxhash32 algorithm&lt;/em&gt;) to save in any chosen directory. I prefer to save in the server&amp;rsquo;s scratch folder, because after a certain time these files are deleted. Remembering that the options in the btc file can be modified in the script, just follow the same pattern as the existing commands.&lt;/p&gt;
&lt;p&gt;Finally, we will gather all the scripts and information generated above, to submit our jobs. Running this command, 5 jobs from the 5 samples of the different patients will be submitted to the queue, and as soon as they have resources they will be run. Submission is very simple, and can be done using the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Rscript --vanilla /path/to/folder/submitJob_SeuratPreProcess.R \ 
        --file /projects/cangen/coliveir/sampleName.txt \ 
        --script /projects/cangen/coliveir/scripts/SeuratPreProcess.R \ 
        --cpu 24 \ 
        --mem 120G \ 
        --time 720
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remembering again that this is an application that can be easily customized for any script in R. Each step can be modified according to your needs and the available resources. I hope it may have helped you to understand this integration between R scripts and job submission. It really helps me daily in the analysis and I found it interesting to share. Any questions, comments, suggestions, criticisms, etc., feel free!&lt;/p&gt;
&lt;h3 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>
